collections:
  all:
    - v007
    - v005
    - v008
    - membrane-v653-free
  big: 
    - v007
    - v005
    - v008
  proteins: 
    - v007
    - v005
    - v008
  controls:
    - membrane-v653-free
  two:
    - v005
    - membrane-v653-free

slices:
  # BIG SIMULATIONS
  v005:
    groups:
      all: all
      proteins: +selectors/protein_selection
    slices:
      current_v0: {'pbc':'mol','groups':['all','proteins'],'start':50000,'end':850000,'skip':500}
      current: +common_slices/v1
  v007:
    groups:
      all: all
      proteins: +selectors/protein_selection
    slices:
      current_v0: {'pbc':'mol','groups':['all','proteins'],'start':240000,'end':590000,'skip':500}
      current_v1: +common_slices/v1
      # note that this is a special slice designed to disambiguate wrong-structure (i.e. mistaken) runs
      current: {'pbc':'mol','groups':['all','proteins'],'start':231000,'end':591000,'skip':500}
  v008:
    groups:
      all: all
      proteins: +selectors/protein_selection
    slices:
      current_v0: {'pbc':'mol','groups':['all','proteins'],'start':50000,'end':550000,'skip':500}
      current: +common_slices/v1
  # CONTROL SIMULATIONS
  membrane-v653-free:
    groups:
      all: all
    slices:
      current: {'pbc':'mol','groups':['all'],'start':50000,'end':650000,'skip':2000}

variables:
  force_field: martini
  selectors:
    protein_selection: (name BB or name SC1 or name SC2 or name SC3 or name SC4 or name SC5)
    protein_backbone: name BB
    resnames_lipid: ['DOPC','DOPS','POP2','POPC']
    resnames_PIP2: ['POP2','PIP2']
  common_slices:
    v1: {'pbc':'mol','groups':['all','proteins'],'start':200000,'end':700000,'skip':1000}
  lipid_names:
    POP2: "$\\mathrm{{PIP}_{2}}$"

meta:
  short_namer: "lambda sn,spot: sn"
  v005:
    label: IRSp53 (upside-down)
  v007:
    label: endophilin
  v008:
    label: IRSp53
  extrana: >
    Note that simulations "simulation-v004-IRSp53-PIP2-bilayer-large" and "simulation-v006-endophilin-A1-PIP2-bilayer-large" have a minimal amount of water in them, and as a result, a few lipids broke the boundary. This is corrected by the "nojumps" flag.

calculations:
  protein_abstractor:
    uptype: simulation
    slice_name: current
    group: proteins
    collections: proteins
  lipid_abstractor:
    uptype: simulation
    slice_name: current
    group: all
    collections: all
    specs:
      selector:
        loop:
          lipid_com:
            resnames: +selectors/resnames_lipid
            type: com
      separator: 
        lipid_tip: "name PO4"
        monolayer_cutoff: 1.4
        topologize_tolerance: 0.10
      nojumps: "z"
  undulations:
    uptype: post
    group: all
    slice_name: current
    collections: all
    specs:
      grid_spacing: 1.0
      upstream: lipid_abstractor
  lipid_mesh:
    uptype: post
    slice_name: current
    collections: []
    specs:
      upstream:
        lipid_abstractor:
          selector: lipid_com
  contacts:
    group: all
    uptype: simulation
    slice_name: current
    collections: big
    specs:
      subject: protein
      object: lipid
      cutoff:
        loop: [5.0,10.0,20.0]
  curvature_undulation_coupling:
    uptype: post
    group: all
    slice_name: current
    collections: 
     - big
    specs:
      upstream:
        protein_abstractor: {}
        undulations: {}
      design:
        loop:
          v9:
            style: wilderness
            curvature_positions: 
              method: neighborhood
              distance_cutoff: 5.0
              spacer: 5.0
            extents:
              method: fixed_isotropic
              extent: 4.0
            curvature_sum: mean
  curvature_undulation_coupling_pixel:
    uptype: post
    group: all
    slice_name: current
    collections: 
     - two
    specs:
      upstream:
        undulations: {}
      design:
        loop:
          # new, experimental hypotheses
          v10:
            style: wilderness
            curvature_positions: 
              method: pixel
              spacer: 20.0
            extents:
              method: fixed_isotropic
              extent: 10.0
            curvature_sum: mean
          v11e:
            style: wilderness
            curvature_positions: 
              method: pixel
              spacer: 10.0
            extents:
              method: fixed_isotropic
              extent: 50.0
            curvature_sum: mean
          v11:
            style: wilderness
            curvature_positions: 
              method: pixel
              spacer: 10.0
            extents:
              method: fixed_isotropic
              extent: 5.0
            curvature_sum: mean
          v12:
            style: wilderness
            curvature_positions: 
              method: pixel
              spacer: 4.0
            extents:
              method: fixed_isotropic
              extent: 2.5
            curvature_sum: mean
aside:        
  # the following are some original hypotheses for hotspots
  # ...note that we discarded some hypotheses that looped over: extent, distance_cutoff, spacer
  v6:
    style: wilderness
    curvature_positions: 
      method: protein_subselection
      selections:
        - [109]
        - [330]
        - [660]
        - [878]
        - [257]
        - [808]
    extents:
      method: fixed_isotropic
      extent: 4.0
    curvature_sum: mean
  v9:
    style: wilderness
    curvature_positions: 
      method: neighborhood
      distance_cutoff: 5.0
      spacer: 5.0
    extents:
      method: fixed_isotropic
      extent: 4.0
    curvature_sum: mean
  v7:
    style: wilderness
    curvature_positions: 
      method: protein_subselection
      selections:
        - [109]
        - [330]
        - [660]
        - [878]
    extents:
      method: fixed_isotropic
      extent: 4.0
    curvature_sum: mean

# excluded for now
aside:
  curvature_undulation_coupling_controls:
    uptype: post
    group: all
    slice_name: current
    collections: 
      - controls
    # ortho specs are not quite meta and placed outside of specs because we expect the caller to
    # ... package them correctly for storage. this is useful for looping inside a calculation
    # ... and in this case, the ortho matches controls with hypothetical protein fields
    ortho_specs:
      imaginary_fields:
        - big
    specs:
      upstream:
        undulations: {}
      design:
        loop:
          v9:
            style: wilderness
            curvature_positions: 
              method: neighborhood
              distance_cutoff: 5.0
              spacer: 5.0
            extents:
              method: fixed_isotropic
              extent: 4.0
            curvature_sum: mean

plots:
  undulations:
    calculation: undulations
    slices: current
    collections: big
  undulations_videos:
    calculation: undulations
    collections: small
  lipid_areas:
    calculation: lipid_mesh
    slices: current
    collections: small
  contacts:
    calculation:
      contacts:
        cutoff: 5.0
    settings: 
      show_residue_names: False
  curvature_undulation_coupling:
    calculation: 
      - curvature_undulation_coupling
      - protein_abstractor
      - undulations
    collections: big
    specs: 
      # alternate names to match alternate inputs above, or the control case
      calcname: curvature_undulation_coupling
      routine:
        # - curvature_field_review
        - individual_reviews
  # the following is how you would train the focus on single point in an upstream loop
  hidden_curvature_undulation_coupling_pixel:
    calculation:
      curvature_undulation_coupling_pixel:
        design: v10
    collections: 
     - two
